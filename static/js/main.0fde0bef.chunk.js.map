{"version":3,"sources":["app/hooks.ts","app/containers/utlis/fetch.ts","app/containers/HomePage/homePageSlice.ts","app/components/Followers.tsx","app/components/Pagination.tsx","app/containers/HomePage/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","fetchFollowers","user","cursor","a","BASE_URL","url","undefined","fetch","response","json","result","page","names","followers","edges","map","edge","node","login","name","endCursor","pageInfo","hasNextPage","HomePageSlice","createSlice","initialState","followersPages","isAccountName","depth","reducers","addUser","state","action","payload","addFollowersPage","updateDepth","updateNameType","selectUser","homePage","selectNameType","selectDepth","selectCurrentNames","selectPaginationInfo","actions","Followers","isAccountNames","listStyle","className","length","style","follower","Pagination","dispatch","paginationInfo","setFollowersPage","setDepth","num","title","type","onClick","console","log","HomePage","props","setNewUser","obj","setNameType","userRef","useRef","useState","setUser","errorMsg","setErrorMsg","isAcccountNames","e","preventDefault","current","value","formInput","useEffect","onSubmit","ref","placeholder","id","onChange","htmlFor","toString","App","store","configureStore","reducer","homePageSlice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fde0bef.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { IPaginationPage } from '../HomePage/types';\n\nexport const fetchFollowers = async (user: string, cursor: any) => {\n  const BASE_URL = 'http://localhost:8080/';\n  try {\n    let url =\n      cursor === undefined\n        ? `${BASE_URL}?user=${user}`\n        : `${BASE_URL}?user=${user}&cursor=${cursor}`;\n    // console.log('url: ', url);\n    const response = await fetch(url);\n    const result = await response.json();\n    // console.log('result', result);\n\n    let page: IPaginationPage = {\n      names: result?.user?.followers?.edges?.map((edge: any) => [\n        edge?.node?.login,\n        edge?.node?.name,\n      ]),\n      endCursor: result?.user?.followers?.pageInfo?.endCursor,\n      hasNextPage: result?.user?.followers?.pageInfo?.hasNextPage,\n    };\n\n    return page;\n  } catch (error) {\n    throw error;\n  }\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../store';\nimport { IHomePageState } from './types';\n\nexport const initialState: IHomePageState = {\n  followersPages: [],\n  user: '',\n  isAccountName: false,\n  depth: 1,\n};\n\nconst HomePageSlice = createSlice({\n  name: 'homePage',\n  initialState,\n  reducers: {\n    addUser: (state, action) => {\n      state.user = action.payload;\n      state.followersPages = [];\n      state.depth = 1;\n    },\n    addFollowersPage: (state, action) => {\n      state.followersPages = [...state.followersPages, action.payload];\n    },\n    updateDepth: (state, action) => {\n      state.depth += action.payload;\n    },\n    updateNameType: (state, action) => {\n      state.isAccountName = action.payload;\n    },\n  },\n});\n\nexport const selectUser = (state: RootState) => state.homePage.user;\nexport const selectNameType = (state: RootState) =>\n  state.homePage.isAccountName;\nexport const selectDepth = (state: RootState) => state.homePage.depth;\nexport const selectCurrentNames = (state: RootState) =>\n  state.homePage?.followersPages?.[state.homePage.depth - 1]?.names;\nexport const selectPaginationInfo = (state: RootState) => [\n  state.homePage.followersPages?.[state.homePage.depth - 1]?.endCursor,\n  state.homePage.followersPages?.[state.homePage.depth - 1]?.hasNextPage,\n];\n\nexport const { addUser, addFollowersPage, updateDepth, updateNameType } =\n  HomePageSlice.actions;\nexport default HomePageSlice.reducer;\n","import React from 'react';\n\nimport { useAppSelector } from '../hooks';\nimport {\n  selectUser,\n  selectCurrentNames,\n  selectNameType,\n  selectDepth,\n} from '../containers/HomePage/homePageSlice';\n\nfunction Followers() {\n  const user = useAppSelector(selectUser);\n  const names = useAppSelector(selectCurrentNames);\n  const isAccountNames = useAppSelector(selectNameType);\n  const depth = useAppSelector(selectDepth);\n  var listStyle = { '--start-count': 30 * (depth - 1) } as React.CSSProperties;\n\n  return (\n    <ol\n      className={`followers ${names?.length === 0 ? 'followers--empty' : ''}`}\n      style={listStyle}\n    >\n      {names?.length === 0 && (\n        <div>Unfortunately {user} currently doesn't have any followers ðŸ˜¢</div>\n      )}\n      {names?.map((follower) => (\n        <li\n          className={`follower ${\n            isAccountNames && !follower[1] ? 'follower-empty' : ''\n          }`}\n          key={follower[0]}\n        >\n          {isAccountNames\n            ? follower[1] || '- No name specified -'\n            : follower[0]}\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nexport default Followers;\n","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { useAppDispatch, useAppSelector } from '../hooks';\nimport {\n  addFollowersPage,\n  updateDepth,\n  selectUser,\n  selectDepth,\n  selectPaginationInfo,\n} from '../containers/HomePage/homePageSlice';\nimport { IPaginationPage } from '../containers/HomePage/types';\nimport { fetchFollowers } from '../containers/utlis/fetch';\n\nconst actionDispatch = (dispatch: Dispatch) => ({\n  setFollowersPage: (page: IPaginationPage) => dispatch(addFollowersPage(page)),\n  setDepth: (num: number) => dispatch(updateDepth(num)),\n});\n\nfunction Pagination() {\n  const user = useAppSelector(selectUser);\n  const depth = useAppSelector(selectDepth);\n  const paginationInfo = useAppSelector(selectPaginationInfo);\n  const { setFollowersPage, setDepth } = actionDispatch(useAppDispatch());\n\n  function handlePrevClick() {\n    setDepth(-1);\n  }\n\n  function handleNextClick() {\n    const fetch = async function () {\n      let page = await fetchFollowers(user, paginationInfo[0]);\n      console.log('page: nextclick', page);\n      if (page) setFollowersPage(page);\n    };\n    fetch();\n    setDepth(1);\n  }\n\n  return (\n    <div className='pagination-buttons'>\n      {depth > 1 && (\n        <button\n          className='btn prev'\n          title={`${1 + 30 * (depth - 2)} - ${30 * (depth - 1)}`}\n          type='button'\n          onClick={handlePrevClick}\n        >\n          &lsaquo; Show previous 30 followers\n        </button>\n      )}\n      {paginationInfo[1] && (\n        <button\n          className='btn next'\n          title={`${1 + 30 * depth} - ${30 * (depth + 1)}`}\n          type='button'\n          onClick={handleNextClick}\n        >\n          Show more followers &rsaquo;\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default Pagination;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport { fetchFollowers } from '../utlis/fetch';\nimport {\n  addUser,\n  addFollowersPage,\n  updateNameType,\n  selectNameType,\n} from './homePageSlice';\nimport { IPaginationPage } from './types';\nimport Followers from '../../components/Followers';\nimport Pagination from '../../components/Pagination';\n\ninterface IHomePageProps {}\n\nconst actionDispatch = (dispatch: Dispatch) => ({\n  setNewUser: (obj: any) => dispatch(addUser(obj)),\n  setFollowersPage: (page: IPaginationPage) => dispatch(addFollowersPage(page)),\n  setNameType: (type: boolean) => dispatch(updateNameType(type)),\n});\n\nexport function HomePage(props: IHomePageProps) {\n  const { setNewUser, setFollowersPage, setNameType } = actionDispatch(\n    useAppDispatch()\n  );\n  const userRef = useRef<HTMLInputElement>(null);\n  const [user, setUser] = useState<string>();\n  const [errorMsg, setErrorMsg] = useState<string>('');\n  const isAcccountNames = useAppSelector(selectNameType);\n\n  useEffect(() => {\n    let cursor: string | undefined = undefined;\n    if (!user) return;\n    const fetch = async function () {\n      try {\n        let page = await fetchFollowers(user, cursor);\n        console.log('page', page);\n        if (page) setFollowersPage(page);\n        setErrorMsg('');\n      } catch (error) {\n        console.log('error 456: ', error);\n        setErrorMsg(error);\n      }\n    };\n    fetch();\n  }, [user]);\n\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    console.log('formInput: ', userRef?.current?.value);\n    const formInput = userRef.current?.value;\n    if (user === formInput) return; // same user so nothing to do\n    formInput && setUser(formInput);\n    formInput && setNewUser(formInput);\n  }\n\n  function handleNameToggle() {\n    setNameType(!isAcccountNames);\n  }\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit}>\n        <input\n          className='input'\n          type='text'\n          ref={userRef}\n          placeholder='Enter github login name'\n        />\n        <button className='btn btn--primary'>Display followers</button>\n        <div className='checkbox-wpr'>\n          <input\n            className='checkbox'\n            type='checkbox'\n            id='cb'\n            onChange={handleNameToggle}\n          />\n          <label className='' htmlFor='cb'>\n            Login Names\n          </label>\n          <label htmlFor='cb'>Account Names</label>\n        </div>\n      </form>\n      <Pagination />\n      {errorMsg.toString() !== '' ? (\n        <div className='error-msg'>{errorMsg.toString()}</div>\n      ) : (\n        <Followers />\n      )}\n    </main>\n  );\n}\n","import React from 'react';\nimport { HomePage } from './app/containers/HomePage';\nimport './App.css';\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport homePageSlice from './containers/HomePage/homePageSlice';\n// import counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    homePage: homePageSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}